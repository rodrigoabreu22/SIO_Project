#!/usr/bin/python3
import sys
import os
import requests
import json
import logging
from encrypt_command import encrypt_data, bytes_to_string, load_rep_pubkey
from decrypt_command import decrypt_data, string_bytes
from signing import sign_data_coms, verify_signature_coms_unpack

logging.basicConfig(format='%(levelname)s\t- %(message)s')
logger = logging.getLogger()
logger.setLevel(logging.INFO)

#rep_suspend_subject <session file> <username>
def rep_suspend_subject(session_file, username):
    """
    Suspend a subject in the organization associated with the session.
    """
    try:
        with open(session_file, 'r') as f:
            session_data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{session_file}' does not exist.")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in the file '{session_file}': {e}")

    org_id = session_data.get("org_id")
    sub_id = session_data.get("sub_id")
    if not org_id:
        raise ValueError("Invalid session data: Missing 'org_id'.")

    base_address = "http://localhost:5000"
    url = f"{base_address}/subject/suspend"
    data = {"org_id": org_id, "username": username, "sub_id": sub_id, "nonce": os.urandom(16).hex(), "seq_num": session_data["seq_num"], "signature": session_data["signature"]}

    #encrypt the data
    rep_pubkey = load_rep_pubkey()
    encrypted_data = encrypt_data(json.dumps(data), rep_pubkey)
    data_str = bytes_to_string(encrypted_data)

    priv_key = session_data["priv_key"].replace("\\n", "\n")
    encrypt_sign_data = sign_data_coms(data_str, priv_key)

    if os.path.exists(session_file):
        with open(session_file, 'w') as f:
            session_data["seq_num"] += 1
            json.dump(session_data, f)

    try:
        response = requests.post(url, json=encrypt_sign_data)

        verify_response = verify_signature_coms_unpack(response.json(), rep_pubkey)

        if response.status_code == 200:

            #decrypt the response
            data_bytes = string_bytes(verify_response)
            priv_key = session_data["priv_key"].replace("\\n", "\n")
            data_decrypted = decrypt_data(data_bytes, priv_key)

            data = json.loads(data_decrypted)

            print(f"Subject '{username}' suspended successfully.")
        else:
            print(f"Failed to suspend subject: {response.status_code} {verify_response}")
    except requests.RequestException as e:
        print(f"An error occurred while suspending the subject: {str(e)}")

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(f'Usage: rep_suspend_subject <session file> [username]')
        sys.exit(1)

    session_file = sys.argv[1]
    username = sys.argv[2]

    rep_suspend_subject(session_file, username)
    sys.exit(0)

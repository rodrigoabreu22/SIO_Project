#!/usr/bin/python3
import sys
import os
import requests
import json
from encrypt_command import encrypt_data, bytes_to_string, load_rep_pubkey
from decrypt_command import decrypt_data, string_bytes
import org_acl
import role_acl
from signing import sign_data_coms, verify_signature_coms_unpack

#rep_remove_permission <session file> <role> <username/permission>
def rep_remove_permission(session_file, role, arg):

    if is_permission(arg):
        rep_remove_permission_perm(session_file, role, arg)
    else:
        rep_remove_permission_username(session_file, role, arg)


def is_permission(arg):
    permissions = list(org_acl.org_acl)
    permissions.extend(list(role_acl.role_acl))

    for perm in permissions:
        if arg == perm.name:
            return True
    return False
        

def rep_remove_permission_username(session_file, role, username):
    try:
        with open(session_file, 'r') as f:
            session_data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{session_file}' does not exist.")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in the file '{session_file}': {e}")
    
    try:

        # Prepare the payload for the API request
        data = {
            "org_id": session_data["org_id"],
            "sub_id": session_data["sub_id"],  
            "role": role,
            "username": username,
            "nonce": os.urandom(16).hex(), 
            "seq_num": session_data["seq_num"],
            "signature": session_data["signature"]
        }

        #encrypt the data
        rep_pubkey = load_rep_pubkey()
        encrypted_data = encrypt_data(json.dumps(data), rep_pubkey)
        data_str = bytes_to_string(encrypted_data)

        priv_key = session_data["priv_key"].replace("\\n", "\n")
        encrypt_sign_data = sign_data_coms(data_str, priv_key)

        if os.path.exists(session_file):
            with open(session_file, 'w') as f:
                session_data["seq_num"] += 1
                json.dump(session_data, f)

        # Send the data to the server
        base_address = "http://localhost:5000"
        url = f"{base_address}/permission/username"
        response = requests.delete(url, json=encrypt_sign_data)

        verify_response = verify_signature_coms_unpack(response.json(), rep_pubkey)

        # Check the response
        if response.status_code == 201:

            #decrypt the response
            data_bytes = string_bytes(verify_response)
            priv_key = session_data["priv_key"].replace("\\n", "\n")
            data_decrypted = decrypt_data(data_bytes, priv_key)

            data = json.loads(data_decrypted)
            
            print(f"Role '{role}' successfully removed from {username}.")
        else:
            print(f"Failed to remove role: {response.status_code} {verify_response}")

    except FileNotFoundError:
        print("Session file not found.")
    except Exception as e:
        print(f"An error occurred while adding the role: {str(e)}")



def rep_remove_permission_perm(session_file, role, permission):
    try:
        with open(session_file, 'r') as f:
            session_data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{session_file}' does not exist.")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in the file '{session_file}': {e}")
    
    try:

        # Prepare the payload for the API request
        data = {
            "org_id": session_data["org_id"],
            "sub_id": session_data["sub_id"],  
            "role": role,
            "permission": permission,
            "nonce": os.urandom(16).hex(), 
            "seq_num": session_data["seq_num"],
            "signature": session_data["signature"]
        }

        #encrypt the data
        rep_pubkey = load_rep_pubkey()
        encrypted_data = encrypt_data(json.dumps(data), rep_pubkey)
        data_str = bytes_to_string(encrypted_data)

        priv_key = session_data["priv_key"].replace("\\n", "\n")
        encrypt_sign_data = sign_data_coms(data_str, priv_key)

        if os.path.exists(session_file):
            with open(session_file, 'w') as f:
                session_data["seq_num"] += 1
                json.dump(session_data, f)

        # Send the data to the server
        base_address = "http://localhost:5000"
        url = f"{base_address}/permission"
        response = requests.delete(url, json=encrypt_sign_data)

        verify_response = verify_signature_coms_unpack(response.json(), rep_pubkey)

        # Check the response
        if response.status_code == 201:

            #decrypt the response
            data_bytes = string_bytes(verify_response)
            priv_key = session_data["priv_key"].replace("\\n", "\n")
            data_decrypted = decrypt_data(data_bytes, priv_key)

            data = json.loads(data_decrypted)
            
            print(f"Permission '{permission}' successfully removed from {role}.")
        elif response.status_code == 204:
            print(f"This role does not have the provided permission.")
        elif response.status_code == 403:
            print(f"No permission to remove a permission from a role.")
        else:
            print(f"Failed to add permission: {response.status_code} {verify_response}")

    except FileNotFoundError:
        print("Session file not found.")
    except Exception as e:
        print(f"An error occurred while removing the permission: {str(e)}")



if __name__ == '__main__':
    if len(sys.argv) != 4:
        print(f'Usage: rep_remove_permission <session file> <role> <username/permission>')
        sys.exit(1)

    session_file = sys.argv[1]
    role = sys.argv[2]
    arg = sys.argv[3]

    rep_remove_permission(session_file, role, arg)
    sys.exit(0)
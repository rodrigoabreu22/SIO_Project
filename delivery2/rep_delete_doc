#!/usr/bin/python3
import sys
import requests
import json
from encrypt_command import encrypt_data, bytes_to_string, load_rep_pubkey
from decrypt_command import decrypt_data, string_bytes
import os
from signing import sign_data_coms, verify_signature_coms_unpack

#rep_delete_doc <session file> <document name>
def delete_document(session_file, doc_name):
    try:
        with open(session_file, 'r') as f:
            session_data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{session_file}' does not exist.")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in the file '{session_file}': {e}")
    
    request = {
        "org_id": session_data['org_id'],
        "sub_id": session_data['sub_id'],
        "document": doc_name,
        "nonce": os.urandom(16).hex(), 
        "seq_num": session_data["seq_num"],
        "signature": session_data["signature"]
    }

    #encrypt the data
    rep_pubkey = load_rep_pubkey()
    encrypted_data = encrypt_data(json.dumps(request), rep_pubkey)
    data_str = bytes_to_string(encrypted_data)

    priv_key = session_data["priv_key"].replace("\\n", "\n")
    encrypt_sign_data = sign_data_coms(data_str, priv_key)

    if os.path.exists(session_file):
        with open(session_file, 'w') as f:
            session_data["seq_num"] += 1
            json.dump(session_data, f)

    try:
        response = requests.delete("http://localhost:5000/document", json=encrypt_sign_data)
        response.raise_for_status() 

        verify_response = verify_signature_coms_unpack(response.json(), rep_pubkey)

        #decrypt the response
        data_bytes = string_bytes(verify_response)
        priv_key = session_data["priv_key"].replace("\\n", "\n")
        data_decrypted = decrypt_data(data_bytes, priv_key)

        data = json.loads(data_decrypted)

        file_handle = data.get("file_handle")
        alg = data.get("alg")
        key = data.get("key")

        return file_handle, alg, key

    except requests.exceptions.RequestException as e:
        raise Exception(f"An error occurred while communicating with the server: {e}")
    except KeyError as e:
        raise Exception(f"Missing expected field in the server response: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f'Usage: rep_delete_doc <session file> <document name>')
        sys.exit(1)

    session_file = sys.argv[1]
    document_name = sys.argv[2]

    try:
        file_handle, alg, key = delete_document(session_file, document_name)
        print(f"File handle: {file_handle}")
        print(f"Algorithm: {alg}")
        print(f"Key: {key}")
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

    sys.exit(0)
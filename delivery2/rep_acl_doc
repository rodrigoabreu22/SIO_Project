#!/usr/bin/python3
import sys
import requests
import json
from encrypt_command import encrypt_data, bytes_to_string, load_rep_pubkey
from decrypt_command import decrypt_data, string_bytes
import os
from signing import sign_data_coms, verify_signature_coms_unpack

# rep_acl_doc <session file> <document name> [+/-] <role> <permission>
def rep_acl_doc(session_file, document_name, role, permission, action="+"):
    try:
        with open(session_file, 'r') as f:
            session_data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{session_file}' does not exist.")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in the file '{session_file}': {e}")
    
    request = {
        "org_id": session_data['org_id'],
        "sub_id": session_data['sub_id'],
        "document": document_name,
        "nonce": os.urandom(16).hex(), 
        "seq_num": session_data["seq_num"],
        "signature": session_data["signature"],
        "role": role,
        "permission": permission,
        "action": action == "+"
    }

    #encrypt the data
    rep_pubkey = load_rep_pubkey()
    encrypted_data = encrypt_data(json.dumps(request), rep_pubkey)
    data_str = bytes_to_string(encrypted_data)

    priv_key = session_data["priv_key"].replace("\\n", "\n")
    encrypt_sign_data = sign_data_coms(data_str, priv_key)

    if os.path.exists(session_file):
        with open(session_file, 'w') as f:
            session_data["seq_num"] += 1
            json.dump(session_data, f)
    
    response = requests.post("http://localhost:5000/doc_acl", json=encrypt_sign_data)

    verify_response = verify_signature_coms_unpack(response.json(), rep_pubkey)

    if response.status_code == 201:
        #decrypt the response
        data_bytes = string_bytes(verify_response)
        priv_key = session_data["priv_key"].replace("\\n", "\n")
        data_decrypted = decrypt_data(data_bytes, priv_key)

        data = json.loads(data_decrypted)
        print(data["message"])

    else:
        print(f"Error: {response.status_code} - {verify_response}")

if __name__ == "__main__":
    if len(sys.argv) != 6:
        print(f'Usage: rep_acl_doc <session file> <document name> [+/-] <role> <permission>')
        sys.exit(1)
    
    session_file = sys.argv[1]
    document_name = sys.argv[2]

    if len(sys.argv) == 6:
        action = sys.argv[3]
        role = sys.argv[4]
        permission = sys.argv[5]

    elif len(sys.argv) == 5:
        role = sys.argv[3]
        permission = sys.argv[4]
    
    else:
        print(f'Usage: rep_acl_doc <session file> <document name> [+/-] <role> <permission>')
        sys.exit(1)

    rep_acl_doc(session_file, document_name, role, permission, action)

    sys.exit(0)

#!/usr/bin/python3
import sys
import os
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

def write_privkey_credentials(credencials_file, key):
    if os.path.exists(credencials_file):
        with open(credencials_file, 'wb') as f:
            f.write(key)

def save_public_key(public_key, filename):
    filename = filename.replace('.pem', '_pub.pem')
    with open(filename, 'wb') as f:
        f.write(public_key)

def create_key_pair(password):
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )

    private_key_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.BestAvailableEncryption(password.encode())
    )

    public_key = private_key.public_key()
    public_key_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    return private_key_pem, public_key_pem

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print(f'Usage: rep_subject_credentials <password> <credencials_file>')
        sys.exit(1)

    password = sys.argv[1]
    credencials_file = sys.argv[2]
    private_key, public_key = create_key_pair(password)
    write_privkey_credentials(credencials_file, private_key)
    save_public_key(public_key, credencials_file)

    sys.exit(0)
#!/usr/bin/python3
import sys
import os
import requests
import json
from encrypt_command import encrypt_data, bytes_to_string, load_rep_pubkey
from decrypt_command import decrypt_data, string_bytes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

#rep_create_session <organization> <username> <password> <credentials file> <session file>
def rep_create_session(organization, username, password, credentials_file, session_file):

    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )

    private_key_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

    public_key = private_key.public_key()
    public_key_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    request = {
        "org_id": organization,
        "username": username,
        "session_pub_key": public_key_pem.decode('utf-8')
    }

    #encrypt the request
    key = load_rep_pubkey()
    data_encrypted = encrypt_data(json.dumps(request), key)
    data_str = bytes_to_string(data_encrypted)

    response = requests.post("http://localhost:5000/session", json=data_str)

    if response.status_code == 200:

        #decrypt the response
        data_bytes = string_bytes(response.json())
        data_decrypted = decrypt_data(data_bytes, private_key_pem.decode('utf-8'))

        data = json.loads(data_decrypted)
        sub_id = data["sub_id"]
        last_interaction = data["last_interaction"]

        print(f"Session created successfully!")

        if os.path.exists(session_file):
            with open(session_file, 'w') as f:
                private_key_pem = private_key_pem.decode("utf-8").replace("\n", "\\n")
                json.dump({"org_id": int(organization), "sub_id": sub_id, "last_interaction": last_interaction, "priv_key": private_key_pem, "seq_num": 0}, f)
        
        else:
            print(f"Failed to load session file: {response.status_code}")
            sys.exit(-1)
    
    else:
        print(f"Failed to create session: {response.status_code}")
        sys.exit(-1)

if __name__ == "__main__":
    if len(sys.argv) != 6:
        print(f'Usage: rep_create_session <organization> <username> <password> <credentials file> <session file>')
        sys.exit(1)

    organization = sys.argv[1]
    username = sys.argv[2]
    password = sys.argv[3]
    credentials_file = sys.argv[4]
    session_file = sys.argv[5]

    rep_create_session(organization, username, password, credentials_file, session_file)

    sys.exit(0)
#!/usr/bin/python3
import sys
import os
import requests
import json
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from encrypt_command import encrypt_data, bytes_to_string, load_rep_pubkey
from decrypt_command import decrypt_data, string_bytes

#rep_add_doc <session file> <document name> <file>
def rep_add_doc(session_file, document_name, file_path):

    try:
        with open(session_file, 'r') as f:
            session_data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"The file '{session_file}' does not exist.")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format in the file '{session_file}': {e}")
    
    try:
        # Generate a random symmetric key
        random_key = generate_random_key()

        # Encrypt the file
        encrypted_content, iv, salt, algorithm = encrypter(file_path, random_key)

        # Generate a file handle (SHA-256 hash of the encrypted content)
        file_handle = hash_content(encrypted_content).hex()

        # Prepare the payload for the API request
        data = {
            "org_id": session_data["org_id"],
            "subject_id": session_data["sub_id"],  
            "content": encrypted_content.hex(),  # Store content as base64-encoded string
            "document_name": document_name,
            "alg": f"{algorithm};{iv.hex()};{salt.hex()}",
            "key": random_key.hex(),  # Send the symmetric key (base64-encoded)
            "file_handle": file_handle,
            "nonce": os.urandom(16).hex(), 
            "seq_num": session_data["seq_num"]
        }

        #encrypt the data
        rep_pubkey = load_rep_pubkey()
        encrypted_data = encrypt_data(json.dumps(data), rep_pubkey)
        data_str = bytes_to_string(encrypted_data)

        if os.path.exists(session_file):
            with open(session_file, 'w') as f:
                session_data["seq_num"] += 1
                json.dump(session_data, f)

        # Send the data to the server
        base_address = "http://localhost:5000"
        url = f"{base_address}/document"
        response = requests.post(url, json=data_str)

        # Check the response
        if response.status_code == 201:

            #decrypt the response
            data_bytes = string_bytes(response.json())
            priv_key = session_data["priv_key"].replace("\\n", "\n")
            data_decrypted = decrypt_data(data_bytes, priv_key)

            data = json.loads(data_decrypted)
            
            print("Document created successfully.")
        else:
            print(f"Failed to create document: {response.status_code} {response.text}")

    except FileNotFoundError:
        print("Document file or session file not found.")
    except Exception as e:
        print(f"An error occurred while creating the document: {str(e)}")



def generate_random_key(key_size=32):
    """
    Generates a random symmetric key.
    
    :param key_size: Length of the key in bytes (default: 32 bytes for AES-256)
    :return: Randomly generated key (bytes)
    """
    return os.urandom(key_size)


def hash_content(content):
    """
    Hashes the content using SHA-256 to generate a file handle.
    
    :param content: The content to hash (bytes)
    :return: The SHA-256 hash (bytes)
    """
    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())
    digest.update(content)
    return digest.finalize()


def encrypter(file_path, key):
    """
    Encrypts a file using AES-CBC and returns the encrypted content, iv, salt, algorithm, and derived key.
    
    :param file_path: Path to the file to encrypt
    :param key: Randomly generated symmetric key
    :return: Encrypted content, IV, salt, algorithm, and derived key
    """
    try:
        # Read the input file content
        with open(file_path, 'rb') as f:
            plaintext = f.read()

        # Generate a random salt
        salt = os.urandom(16)

        # Derive the key using PBKDF2 with the provided key and random salt
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=default_backend()
        )
        derived_key = kdf.derive(key)

        # Generate a random initialization vector (IV)
        iv = os.urandom(16)

        # Initialize AES cipher in CBC mode
        cipher = Cipher(algorithms.AES(derived_key), modes.CBC(iv), backend=default_backend())
        encryptor = cipher.encryptor()

        # Pad the plaintext to make it a multiple of the block size (16 bytes)
        padding_length = 16 - (len(plaintext) % 16)

        padded_plaintext = plaintext + bytes([padding_length] * padding_length)

        # Encrypt the plaintext
        ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()

        algorithm = "AES-CBC"

        return ciphertext, iv, salt, algorithm

    except Exception as e:
        print(f"An error occurred during encryption: {str(e)}")
        raise

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print(f'Usage: rep_add_doc <session file> <document name> <file>')
        sys.exit(1)

    session_file = sys.argv[1]
    document_name = sys.argv[2]
    file_path = sys.argv[3]

    rep_add_doc(session_file, document_name, file_path)
    sys.exit(0)
